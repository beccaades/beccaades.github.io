<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: school | A Coder's Journey]]></title>
  <link href="http://beccaades.github.io/blog/categories/school/atom.xml" rel="self"/>
  <link href="http://beccaades.github.io/"/>
  <updated>2015-08-16T17:19:34-04:00</updated>
  <id>http://beccaades.github.io/</id>
  <author>
    <name><![CDATA[Becca Ades]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What We Talk About When We Talk About Third Party API's]]></title>
    <link href="http://beccaades.github.io/blog/2015/07/29/what-we-talk-about-when-we-talk-about-third-party-apis/"/>
    <updated>2015-07-29T21:35:09-04:00</updated>
    <id>http://beccaades.github.io/blog/2015/07/29/what-we-talk-about-when-we-talk-about-third-party-apis</id>
    <content type="html"><![CDATA[<p><img src="http://thegreatgatsby.warnerbros.com/wp-content/uploads/2013/02/GG_downloads.jpg" alt="Great Gatsby" /></p>

<p><font color="blue"><em>‚ÄúThey were careless people, Tom and Daisy- they smashed up things and creatures and then retreated back into their money or their vast carelessness or whatever it was that kept them together, and let other people clean up the mess they had made.‚Äù &ndash;F. Scott Fitgerald</em></font></p>

<p>If there was a metaphorical representation of a third party API, Leo would be it.</p>

<p>Undoubtedly.</p>

<p>The Great Gatsby.  Eternally eloquent, dazzling, sparkling, but somehow you can&rsquo;t help but feel that you were handed a big broken, mess, you need to JSON your way out of!</p>

<p>APIs aren&rsquo;t exactly &ldquo;messy&rdquo; so to speak, in fact, they are quite the opposite, a careful, calculated way to access an <em>Application Programming Interface&rsquo;s</em> data&ndash;yet to someone interacting with an API for the first time, you can&rsquo;t help but be a bit messy, <font color="blue">&ldquo;careless&rdquo;</font> so to speak&ndash;in fact, it&rsquo;s completely necessary to understand how your API is working.</p>

<p>This blog will attempt to give you the tools to wrecklessly and glamorously parse APIs.  Before you know it, you&rsquo;ll be flying over the Queensboro bridge, all of New York City in your view as you glide slowly but stylishly (cause you&rsquo;re in a hot car with a 12 cylinder engine üòé) headfirst into the city that never sleeps.</p>

<p><img src="http://i.ytimg.com/vi/QoBGqtGBMLI/maxresdefault.jpg" alt="Cool Car" /></p>

<p>First, it sounds obvious, but at times, we all need the obvious pointed out to us with exclamation marks!!!!!!! and &ndash;>arrows&lt;&ndash;.  LOUD AND CLEAR. Making an API call is simply accessing the correct URL for your desired data (well&hellip; you are also scraping the JSON located at a SPECIFIC website, but this is a good starting understanding.)</p>

<p>Now, look up at the top of the screen. RIGHT NOW!  The url you are currently at is &ldquo;<a href="http://beccaades.github.io/what-we-talk-about-when-we-talk-about-third-party-apis">http://beccaades.github.io/what-we-talk-about-when-we-talk-about-third-party-apis</a>&rdquo;. This is where you come on the internet to read my blog about API&rsquo;s!</p>

<p>Now for THE RULES:</p>

<p><font color="red">1st RULE OF API&rsquo;s: READ THE DOCUMENTATION.</font></p>

<p>The latest API I used, instagram, includes a developer page.  It tells you all the different endpoints you will need to access their data, and you can get to playing immediately, by placing the different queries in your browser.</p>

<p>This is what they give you:</p>

<pre><code class="ruby">https://api.instagram.com/v1/locations/search?lat=48.858844&amp;lng=2.294351&amp;access_token=ACCESS-TOKEN
</code></pre>

<p>This is what you do:</p>

<pre><code class="ruby">https://api.instagram.com/v1/locations/search?lat=40.7577&amp;lng=-73.9857&amp;access_token=ACCESS-TOKEN
</code></pre>

<p>And <font color="red">this</font> is what you get:</p>

<pre><code class="ruby">{
meta: {
code: 200
},
data: [
{
latitude: 40.757696,
id: "5106788",
longitude: -73.985716,
name: "Swatch"
},
{
latitude: 40.75770595,
id: "877266653",
longitude: -73.985676,
name: "Espn - Abc Studio Times Square"
},
{
latitude: 40.7576833,
id: "5012142",
longitude: -73.9857171,
name: "Times Square"
},
{
latitude: 40.757692657,
id: "242689896",
longitude: -73.985731602,
name: "Black Bar &amp; Loungue"
},
</code></pre>

<p>(SIDENOTE: Please don&rsquo;t be a dummy and know that you will have to actually replace the access token with your own.)</p>

<p>To access this information you can treat the JSON like a hash. Let&rsquo;s say we set this equal to the variable data_hash.  If I wanted to access &ldquo;Swatch,&rdquo; I could enter data_hash[:data][0][:name]and it would return &ldquo;Swatch&rdquo; back to me.</p>

<p><font color="red">2nd RULE OF API&rsquo;s: PLAY!!</font></p>

<p>Now.  Listen close.  I have a little gem to share with you.  The httpary gem to be exact.</p>

<p>This gem lets you get down to business quickly by simply requiring it and then gaining direct access to JSON in the API to your app, to gain both familiarity and explore potential methods for your classes.</p>

<p>To use the httparty gem you simply require it in your gem file.  Then in your model, your require the gem like so:</p>

<pre><code class="ruby">class InstagramWrapper

  require 'httparty'

  response = HTTPARTY.get("https://api.instagram.com/v1/media/search?lat=40.7577&amp;lng=73.9857&amp;distance=1000&amp;access_token=access_token")

end
</code></pre>

<p>You can then begin by binding into the respond and deciding what information you need and begin to structure your methods.</p>

<p><font color="red">3rd RULE OF API&rsquo;s: ASK THE API&rsquo;s WHAT METHODS THEY HAVE</font></p>

<p>Once you are able to access the JSON, don&rsquo;t be afraid to ask the API exactly what methods they have! They may just tickle your fancy with some extra methods that they don&rsquo;t discuss in the documentation.  For example, the only way, I was able to learn about instagram&rsquo;s nifty tag_count feature was through directly asking instagram what methods they have (rails console, baby!) and I got this quite lovely response (amongy MANY many others).</p>

<pre><code class="ruby">=&gt; [:client,
 :get_count_for_tag,
 :get_tourist_instagrams
</code></pre>

<p>I simply did this by entering the following into my console:</p>

<pre><code class="ruby">tell_me_the_methods_baby = InstagramWrapper.new
tell_me_the_methods_baby.methods?
</code></pre>

<p>How wonderfully convenient.</p>

<p><font color="red">4th RULE OF API&rsquo;s: WRAP THE API&rsquo;S METHODS IN YOUR OWN INSTANCE METHODS</font></p>

<p>Once you have found the desired method, it is time to wrap it in an instance method.  For example the instagram tag count method could be wrapped as such: </p>


<pre><code class="ruby">  def get_count_for_tag(tag)
    results = client.tag_search(tag)
    results.collect {|result| result["media_count"]}.first
  end
</code></pre>

<p>  Results for the tag &ldquo;HTTparty&rdquo; gives you back :</p>

<pre><code class="ruby">=&gt; 8.0
</code></pre>

<p>Sad toast.</p>

<p>The people of instagram are definitely missing out.</p>

<p>And there you have it.  A step by step guide to deconstruct the many faces third party API&rsquo;s may bring us.  Cheers to that!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stalk Much?...Cause Rails Does! A Tale of One Sessions' Session]]></title>
    <link href="http://beccaades.github.io/blog/2015/07/15/stalk-much/"/>
    <updated>2015-07-15T22:39:06-04:00</updated>
    <id>http://beccaades.github.io/blog/2015/07/15/stalk-much</id>
    <content type="html"><![CDATA[<p>This may not be the most interesting of all stories, but it's one 
  that need to be told.  That begs to be heard.  And here is me, giving this story it's very 
  own particular voice (and thick-framed glasses!). So lets start at the beginning (alas, where most programming stories tend to start), and see if we can't make it through to the other side.  Won't you, my dear reader, come on this jaunt with me?</p>


<p>  <img src="http://www.seventriangle.com/wp-content/uploads/2012/04/dragon.jpg" alt="Once upon a time" /></p>

<p>  <p>We commence our journey in the darkest of crevices, a most important file hidden deep inside the config directory: route.rb.  Here we need to establish a root directory, and hatch our grandiose session plans.</p></p>

<pre><code class="ruby">  root 'posts#index'

  resources :sessions, only: [:create, :new, :destoy]
  get '/signup', to: 'users#new'
  get '/logout', to: 'sessions#destroy'
  get '/login', to: 'sessions#new'
</code></pre>

<p>  <p> We use the resources key word to add seven routes to our web application and quickly narrow these routes down to just the ones we need via the syntax &lsquo;:only&rsquo;.  To keep things clear, for both us and our user, we will name these routes as &lsquo;signup&rsquo;, &lsquo;logout&rsquo;, and &lsquo;login&rsquo; respectively.  We do not play with metaphors here.  Literal is best. Now, we have a sessions directory, and we can begin building our sessions conroller.  To do this, we type the following into our terminal:</p></p>

<pre><code class="ruby">rails g controller sessions
</code></pre>

<p>  <p>This will give us a controller, and while we are here&ndash;lets fill out the actions to match our routes:</p></p>

<pre><code class="ruby">  def new
  end

  def create
  end

  def destroy
  end
</code></pre>

<p>  <p>Here we go!</p></p>

<p>   <img src="http://orig07.deviantart.net/90f0/f/2013/287/2/e/at__here_we_go__by_blistinaorgin-d6qf87y.png" alt="Luigi" /></p>

<p>   <p>In order for our sessions hash to function, we need our user to be validated on the home page before visiting any other views.  Thus ensues the process of validating and logging in a user.  Yet, it is a bit more complicated than that for us programmatically.  This involves creating a method we can access from any view on our website.  For this we need to go to that forbidden place, we have yet to explore.  <strong>The application controller</strong>.</p></p>

<pre><code class="ruby">  class ApplicationController &lt; ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception
  before_action :login_required

  #This method checks if we have a user signed in
  def login_required
    if !logged_in?
      redirect_to login_path, :notice =&gt; "Log in to edit or delete your post"
    end
  end

  def logged_in?
    !!current_user
  end

  helper_method :logged_in?

  #This method gives us details about our user
  def current_user
    if session[:user_id]
      @current_user = User.find(session[:user_id])
      @current_user
    else
      false
    end
  end

  helper_method :current_user

  end
</code></pre>

<p>These two helper methods, current_user and logged_in? will allow us to access data pertaining to our user regardless of the variables passed in through our controllers.  We will be able to access them from anywhere in our views!  And do notice the macro 'before_action :login_required,'--this makes it mandatory for a user to be logged in before accessing our But please, let's not get ahead of ourselves. Before we get to our views, we need to make a pit stop at our post controller to make sure it has access to all the necessary information.  Most notably, that we allow a user to visit our home page, or more specifically, posts#index: </p>


<pre><code class="ruby">class PostsController &lt; ApplicationController
  skip_before_action :login_required, :only =&gt; [:index]
</code></pre>

<p>This macro does exactly what is says it does (dontcha just love rails?), it allows only the index page of our posts controller to be visible to a user without first logging in (hence the skip_before_action --get it?!).</p>




<p> So now, finally, we are ready to enter the holy view!!!!</P>


<p><img src="http://www.intriguing.com/mp/_pictures/grail/large/HolyGrail051.jpg" alt="The Holy Grail" /></p>

<p>Now one might think, we should go to our post index page.  However, that individual would be WRONG.  Because we, programmers, are planners.  And we want our user to be able to logout no matter what page they are on.  I mean, really, sessions wants to be AVAILABLE, people!!!  This means that not only are we going to go into that cute little layouts directory, but also we will be rendering a header  from the application.html.erb file.</p>




<p>Rendering a partial is super easy, you simply do this within the body of your application.html.erb. </p>


<pre><code class="ruby">&lt;%= render 'layouts/header' %&gt; 
</code></pre>

<p>Followed by the creation of "_header.html.erb"</p>


<p>Now, we are embarking on the climax of our tale.  The header partial: </p>


<pre><code class="ruby">    &lt;% if logged_in? %&gt;
    Hiya, &lt;%= current_user.name %&gt;! You're looking mighty fine today! 
    &lt;%=link_to "Log Out", logout_path %&gt;
  &lt;% else %&gt;
    &lt;%= link_to "Log In", login_path %&gt;
  &lt;% end %&gt;
</code></pre>

<p>This allows the user to loggout from every page in our web application, not to mention, a sweet, homey greeting üòé.</p>




<p>But we still have one problem.  How does our session know who our user is? For this, we will come full circle and revisit our sessions controller.</p>


<pre><code class="ruby">class SessionsController &lt; ApplicationController
  skip_before_action :login_required, :only =&gt; [:new, :create]

  def new
    @user = User.new
  end

  def create
    user = User.find_by_email(params[:email])
      if user &amp;&amp; user.authenticate(params[:password])
        session[:user_id] = user.id
        redirect_to root_path, :notice =&gt; "Welcome back, #{user.email}"
      else
        flash.now.alert = "Invalid email or password"
        render "new"
      end 
  end

  def destroy
    session[:user_id] = nil 
    redirect_to root_path 
  end

  private
    def login(user)
      session[:user_id] = nil
    end
end
</code></pre>

<p>Like all good tales, there was one quiet character hiding, softly apart from the rest.  The user.id.  And like a wise old woman, who knows all, but is soft spoken, she hid away in the sessions create action.  Yet without this one line of code "session[:user_id] = user.id", our entire sessions hash would break and fall apart. It's the link between the two controllers, between our database and our models, and also, the link between our application, and our user.</p>




<p>And that my friends, is how you create sessions in rails.  Stalking complete.  Story Over.</p>


<p><img src="http://chorleywoodmagazine.co.uk/wp-content/uploads/2015/07/snouty-pride-thats-not-all-folks-snoutypig.png" alt="That's not all!" /></p>

<p><strong> !!!!SPECIAL NOTE YOU <font color="red"> MUST </font> READ!!!! </strong> Please add the following to your gem file:</p>


<pre><code class="ruby">gem 'bcrypt'
</code></pre>

<p>This will enable encription of passwords.  You will also need to rename the password column in your user's table schema to "password_digest".  Rails does the rest.  Can you say <strong><font color="blue">MAGIC</font></strong>?!?!?!!</p>




<p>Now, for reals!</p>


<p><img src="http://www.rescuepost.com/.a/6a00d8357f3f2969e201b7c6e9c3ef970b-pi" alt="That's all folks" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Post #3 or... "What I Did Over My Summer Vacation!"]]></title>
    <link href="http://beccaades.github.io/blog/2015/07/05/what-i-did-over-my-summer-vacation/"/>
    <updated>2015-07-05T15:54:45-04:00</updated>
    <id>http://beccaades.github.io/blog/2015/07/05/what-i-did-over-my-summer-vacation</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://beccaades.github.io/images/recall.png"></p>

<p><font color="blue"> I <strong> love </strong> Sinatra. </font></p>


<p><font color="green"> I love the interactivity.</font></P>


<p><font color="orange"> I love the creativity. How you can create a web application, and <strong> BAM </strong>it is there. Tangible.</font></P>


<p><font color="red"> So close you can almost touch it. </font></P>


<p> So close you can <a href="https://whyevolutionistrue.files.wordpress.com/2014/08/frank-sinatra5.jpg">click on it.</a></p>


<p></p>

<p> But I wanted to take it further.  I wanted it to look stylized.  CSS stylized.  So this weekend (my fourth of July summer break!) I set about to accomplish the possible.</p>




<p>I found all this and more on <a href="http://code.tutsplus.com/tutorials/singing-with-sinatra--net-18965">Singing with Sinatra</a>, a website designed specifically to give beginner Ruby programmers an introduction to Sinatra.  Through this three part web series, I was able to supplement my understanding of Sinatra, and complete a fully realized web app for a simple to-do list.  And of course, no web app would be complete without the appropriate styling.</p>




<p><p>CSS styling to be specific.<p>
<p>To start, I added an erb page at the root of my views directory for the layout: <p></p>

<pre><code class="ruby">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="utf8"&gt;
  &lt;title&gt;&lt;%= @title + ' | Recall' %&gt;&lt;/title&gt;
  &lt;link href='http://beccaades.github.io/reset.css' rel='stylesheet'&gt;
  &lt;link href='http://beccaades.github.io/style.css' rel='stylesheet'&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;header&gt;
    &lt;hgroup&gt;
      &lt;h1&gt;&lt;a href="http://beccaades.github.io/"&gt;Recall&lt;/a&gt;&lt;h1&gt;
      &lt;h2&gt;'cause you're too busy to remember&lt;/h2&gt;
    &lt;/hgroup&gt;
  &lt;/header&gt;

  &lt;div id="main"&gt;
    &lt;%= yield %&gt;
  &lt;/div&gt;

  &lt;footer&gt;
    &lt;p&gt;&lt;small&gt;An app for &lt;a href="http://net.tutsplus.com"&gt;Nettuts+&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
  &lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p><p>How does this connect to my other ruby pages you may wonder?  Yield, my friend.  Literally, yield.</p></p>

<p><p>You see the div id with the tag of &ldquo;main&rdquo;?</p></p>

<p><p>Right here:</p></p>

<pre><code class="ruby">  &lt;div id="main"&gt;
    &lt;%= yield %&gt;
  &lt;/div&gt;
</code></pre>

<p><p>This allows the routes (view pages) to be passed in through a block, while also utilizing the id selector to streamline the content <em>stylistically</em> of each and every page my heart desires.</p></p>

<p><p>Another nifty trick, I was looking for was the inclusion of css stylesheets.  Through linking to them in my layout page, I was able to universally style my web recall app.</p></p>

<p><p>I was introduce to something else as well.  Let me show you: </p></p>

<pre><code class="ruby">  &lt;link href='http://beccaades.github.io/reset.css' rel='stylesheet'&gt;
  &lt;link href='http://beccaades.github.io/style.css' rel='stylesheet'&gt;
</code></pre>

<p><p>Do you see it?  The reset&ndash;right before the css stylesheet.  That was all new to me.  So I researched&hellip;</p></p>

<p><img src="https://thenypost.files.wordpress.com/2015/04/computer.jpg" alt="Researching" /></p>

<p><p>&hellip;Basically every web browser uses a base stylesheet which somewhat ensures that HTML is rendered <em>reasonably</em> well when custom CSS is not provided.  Unfortunately, each browser uses a different base, and thus enters CSS resets.  A way to strip styles so your elements are rendered consistently across a multitude of browsers.</p></p>

<p><p>One developer, <a href="http://www.sitepoint.com/css-resets-useful-or-useless/">Craig Buckler</a> opposes CSS resets quite simply because he resents the very idea that &ldquo;pixel perfect&rdquo; rendering is actually an achievable goal.  Instead he opts for a simple css reset of: </p></p>

<pre><code class="ruby">  * {padding: 0; margin: 0;}
</code></pre>

<p><p>So like any budding developer&ndash;I tested it out.  You remember the homepage of my web app I showed you at the beginning? (Just scroll up if it&rsquo;s not <font color="red">PIXEL PERFECT</font> in your mind üòé).  Drumroll please or desperate scream&ndash;after all we are about to strip my app of its magic!</p></p>

<p><img class="center <a" src="href="http://www.insite.io/wp-content/uploads/2015/04/animal_drums.jpg">http://www.insite.io/wp-content/uploads/2015/04/animal_drums.jpg</a>">
<img class="center" src="http://beccaades.github.io/images/recall-no-reset.png"></p>

<p><p>To reset or not reset?  The decision is yours.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["EXCUSE ME!!! My Computer Broke!"]]></title>
    <link href="http://beccaades.github.io/blog/2015/06/21/excuse-me-my-computer-broke-again/"/>
    <updated>2015-06-21T21:04:20-04:00</updated>
    <id>http://beccaades.github.io/blog/2015/06/21/excuse-me-my-computer-broke-again</id>
    <content type="html"><![CDATA[<p>There she goes. Again.</p>


<p></p>

<p><font color="red">#Shocking </font></p>


<p></p>

<p>It's always MY fault.  Like there's some sort of magic fairy dust sprinkled on <em>everyone else's</em> computer except *hers*. She even got an instructor to help her this time. Wow.  They are going to be in for a tasty treat--look what she put in!</p>


<pre><code class="ruby">evil_pokemons.each do |pokemons|
Pretty Please scrape the pokemons for me!!!!!
end
</code></pre>

<p>Please. Tell me she's joking.</p>


<p></p>

<p>Oh Wait, Shhhh. This is going to be good! She was just asked if she read the Nokogiri tutorial.  SAY WHAT???? <em>She DID</em>?  She was on that website for .56 seconds.  <font color="red">#FACTS</font>. <em><strong>(PLEASE!!! JUST OPEN MY PAGES AND I WILL SPILL ALL! NO SNITCHES GET STICHES FOR ME!!!)</strong></em>.</p>




<p>Deep breaths. Let's turn on this fan. Look, I mean, had she read it, she would've seen it's all really quite simple. You just give me a few, quick, straightforward commands at the top of your page, and I make like a shepherd and flock!</p>


<pre><code class="ruby">require 'nokogiri'
require 'open-uri'
</code></pre>

<p>You can even put these commands into irb to play around with, and I will set up your ENTIRE environment perfectly (just make sure I return "true" after each command).</p>


<p></p>

<P> Next, kindly let me know what language you would like to use (I'm <em>very</em> versatile), and for heaven's sake don't be lazy, name your document something fun--'doc' is just so uneventful.</p>


<pre><code class="ruby">html = open('website').read
doc_name = Nokogiri::HTML(html)
</code></pre>

<p>Now, you are at the part where you get to chillax.  Open up your browser by right clicking in crome on inspect element, and you should be able to use the nifty magnifying glass to help you locate any element's css selector you would like on the page.</p>




<p>Once you've found the css selector of your desired element-try it out-I mean, you wouldn't buy a car without test driving it first, why should scraping be <em>any different</em>? Feel free to use binding.pry, a simple puts command, or the beautiful world of irb!</p>


<pre><code class="ruby">variable_doc.search(" ").text
variable_doc.css(" ").text
</code></pre>

<p>.search and .css mean the same thing, so don't cry your pretty little eyes out about that!  Once you've successfully matched the css selector to your element you are good to go and can head right back to your ruby program. Adding .text at the end returns--you guessed it--the text that your css selector selected!  I will take care of all the rest (like I ALWAYS do üòò).</p>


<p><img src="https://thereadingwomb.files.wordpress.com/2011/07/jimmy-jet.gif" alt="Jimmy Jet and His TV Set" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Beginning]]></title>
    <link href="http://beccaades.github.io/blog/2015/06/07/my-first-post-on-octopress/"/>
    <updated>2015-06-07T16:37:11-04:00</updated>
    <id>http://beccaades.github.io/blog/2015/06/07/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>  You woke up one day and realized you were ready to try something new.  Do something different.  You had taught for nine years: three countries, five schools, all ages, and (luckily!) you loved it.  You were absolutely happy.  You loved the purpose it gave you. The connections you made. The unbridled energy of Every. Single. Day.  You were never bored.  Never.</p>

<p>  Until one day, it just didn‚Äôt work anymore. And you weren‚Äôt sure exactly why. You wished you had the answer, because then, maybe, you could have fixed it. It became harder and harder to keep at something, when the spark was gone.  Maybe it was all the testing.  Maybe it was the lack of services. Maybe it was the bureaucracy.  You can‚Äôt quite say&hellip;but it was time for something new.</p>

<p>  You remember hearing that the average person switches their career 7 times, and here you were 31, and still doing the same thing?  Maybe it was all just an expiration date after all!  You remember learning about Steph, how she went to Flatiron, and was now working full time.  Wait.  You said.  She just went to school for three months and now has a job? Yes. WAIT.  For reals? AND she LOVES it.</p>

<p>  You talked to people.  One girl had left an office job for a start up.  Her biggest regret was that her employers didn‚Äôt fire her so she could collect unemployment.  She told you to begin at codeacademy.  You did.  You felt like you were back in fifth grade when every morning began with a multiplication times tables.  Every student had 1 minute complete the questions, and if you got them all right, you got a sticker, and the next day you moved on to the next number.   You loved the certificates.  The emails congratulating you.  And you loved coding!</p>

<p>  You took a class, you applied to some programs, you coded, and miraculously, you got into Flatiron!  You were so happy(cartwheels(!) and cartwheels(!))!  You had a new future.  Something exciting. Bright. And last week, you began.  You coded all week.  You learned how much you didn‚Äôt know.  You got help.  You stayed up too late, and finally, you managed to answer some of your own questions.  The error messages slowly made a little more sense.  And that‚Äôs where you are.  At the beginning.</p>

<p>  I lied.</p>

<p>  I said one day I woke up and wanted to try something new.  It didn‚Äôt happen like that.  It was a process.</p>

<p>  There is no ready. set. go.  It‚Äôs not a gunshot and then you go off running into the distance like an antelope tearing up a glorious African sunset.  It‚Äôs a Sunday long run, slow footstep after slow footstep, building up the miles, so that one day, when that shot is fired, you will at the absolute least, know you prepared the very best you could.</p>
]]></content>
  </entry>
  
</feed>
